<?php

/*
 * Implementation of hook_menu()
 */
function civixero_menu() {

    $items['admin/cas/plugins/civixero'] = array(
        'title'            => t('CiviXero Settings'),
        'page callback'    => 'drupal_get_form',
        'page arguments'   => array('civixero_settings_form'),
        'access arguments' => array('administer civiaccountsync'),
        'type'             =>  MENU_NORMAL_ITEM,
        'file'             => 'civixero.admin.inc',
        'weight'           => 3,
    );
    return $items;

}

/**
 * Implementation of hook_civiaccountsync_post_add_contact()
 *
 * This hook is called after a contact is added through the CiviAccountSync Contact Add form,
 * if this plugin downloaded the contact in the first place
 */
function civixero_civiaccountsync_post_add_contact($contact_id, $additional_data) {

    // if we were passed some additional data, attempt to unserialize it
    if ($additional_data)
        $additional_data = unserialize($additional_data);

    // if additional data is just an empty array or something, then there's nothing to do
    if (!$additional_data)
        return;

    civicrm_initialize(true);

    $location_types = array_flip(CRM_Core_PseudoConstant::locationType());

    // If we have address data, create Address record(s) in Civi
    if (isset($additional_data['Address'])) {

        // For each of the supplied addresses ..
        foreach ($additional_data['Address'] as $address) {

            // if AddressType is the only key, then ignore - it's not much use to us
            if (isset($address['AddressType']) and count($address) === 1)
                continue;

            $params = array(
                'contact_id' => $contact_id,
                'version'    => 3
            );

            // Xero has two address types, POBOX and STREET. We think the best way to map those to Civi location types is:
            // POBOX = Billing, STREET = Home (Individual) or Main (Organisation)
            $location_type = 'Billing';
            if ($address['AddressType'] == 'STREET') {
                // then we need to know the Contact Type - we could pass it into the hook, but probably best not to try
                // and predict every possible value a hook implementation might need, as that's a slippery slope
                $contact = civicrm_api('Contact', 'get', array(
                    'version' => 3,
                    'id'      => $contact_id
                ));
                if ($contact['is_error']) {
                    civiaccountsync_error(t(
                        'Contact lookup failed in @file at @line because @excuse',
                        array(
                            '@file'   => __FILE__,
                            '@line'   => __LINE__,
                            '@excuse' => $contact['error_message']
                        )
                    ));
                }
                $contact       = reset($contact['values']);
                $location_type = $contact['contact_type'] == 'Individual' ? 'Home' : 'Main';

            }

            foreach (array(
                'AddressLine1' => 'street_address',
                'AddressLine2' => 'supplemental_address_1',
                'AddressLine3' => 'supplemental_address_2',
                'AddressLine4' => 'supplemental_address_3',
                'City'         => 'city',
                'PostalCode'   => 'postal_code',
                'Region'       => 'state_province',
                'Country'      => 'country'
            ) as $xero_field => $civi_field)
                if (isset($address[$xero_field]))
                    $params[$civi_field] = $address[$xero_field];

            $params['location_type_id'] = $location_types[$location_type];
            $result = civicrm_api('Address', 'create', $params);

            if ($result['is_error']) {
                civiaccountsync_error(t(
                    'Civixero: Unable to create address for contact id @cid because @excuse',
                    array(
                        '@cid'    => $contact_id,
                        '@excuse' => $result['error_message']
                    )
                ));
            }

        }
    }

    // If we have phone data, create Phone record(s) in Civi
    if (isset($additional_data['Phone'])) {
        foreach ($additional_data['Phone'] as $phone) {
            // todo
        }
    }

}


/*
 * Pre process an invoice
 */
function civixero_invoice_prerequisites($invoice, $xero) {
  static $trackingOptions = array();
  if (empty($trackingOptions)) {
    $tc = $xero->TrackingCategories;
    //let's just check block exists at all for now - creat an array of options & generate
    foreach ($tc['TrackingCategories']['TrackingCategory'] as $trackingCategory) {
      foreach ($trackingCategory['Options']['Option'] as $key => $value) {
        $trackingOptions[] = $value['Name'];
      }
    }
  }
  if (! in_array($invoice['block'], $trackingOptions)) {
    $errors[] = "Tracking Category " . $invoice['block'] . " needs to be created in Xero before the invoice syncronisation can be completed";
  }
  if (! in_array($invoice['event_code'], $trackingOptions)) {
    $errors[] = "Tracking Category " . $invoice['event_code'] . " needs to be created in Xero before the invoice syncronisation can be completed";
  }

  return $errors;
}
