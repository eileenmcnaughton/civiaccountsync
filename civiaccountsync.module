<?php

/*
 * CiviAccountSync module - provides a plugin host environment for syncing
 * various accounts packages with CiviCRM
 */

/**
 * Implementation of hook_civicrm_post()
 * Mark entities (currently just contributions) as needing to be created / updated / deleted in accounts package
 */
function civiaccountsync_civicrm_post($op, $objectName, $objectId, &$objectRef) {

    if ($objectName == 'Contribution') {
        switch ($op) {
            case 'create':
            case 'edit':
            case 'delete':
                CRM_Core_DAO::executeQuery('REPLACE INTO cas_pending (entity_type, entity_id, action)
                  VALUES (%1, %2, %3)',
                    array(
                        array($objectName, 'String'),
                        array($objectId, 'Integer'),
                        array( $op == 'edit' ? 'update' : $op, 'String'),
                    )
                );
                break;
        }
    }

}

/**
 * Implementation of hook_cron()
 * Run scheduled sync tasks if there are any to run
 */
function civiaccountsync_cron() {
    civiaccountsync_do_sync_job(true);
}

function civiaccountsync_do_sync_job($is_scheduled=false) {

    module_load_include('inc', 'civiaccountsync', 'civiaccountsync.utils');
    module_load_include('inc', 'civiaccountsync', 'civiaccountsync.plugin');

    // Get sync job information, plus info on last run times for each task
    $job_config    = variable_get('civiaccountsync_sync_job_config', array());
    $last_run_info = variable_get('civiaccountsync_last_run_info', array());

    $sync_info = &drupal_static('civiaccountsync');
    $sync_info->is_scheduled = $is_scheduled;

    // Iterate through enabled plugins
    foreach (array_keys(civiaccountsync_get_plugins()) as $plugin_name) {

        // If we're in non-scheduled mode, only run jobs from the currently selected plugin
        if (!$is_scheduled and $job_config['#dashboard_selected_plugin'] != $plugin_name)
            continue;

        // If we're in scheduled mode, check scheduling is enabled for this plugin ..
        if ($is_scheduled and !$job_config[$plugin_name]['#scheduler']['enabled'])
            continue;

        // Get the desired interval (in hours) between scheduled sync jobs
        $hours_interval = $job_config[$plugin_name]['#scheduler']['interval'];

        // Attempt to load civiaccountsync.inc from plugin module's directory - but do not
        // enforce, so as these functions can also live in the module's .module file if desired.
        module_load_include('inc', $plugin_name, 'civiaccountsync');

        // Attempt to run plugin's init function if one exists
        if (function_exists($plugin_name . '_init')) {
            try {
                call_user_func($plugin_name . '_init');
            } catch (Exception $e) {
                civiaccountsync_error(t('CiviAccountSync was unable to initialize the @plugin plugin because @excuse',
                    array(
                        '@excuse' => $e->getMessage(),
                        '@plugin' => $plugin_name
                    )
                ));
                continue;
            }
        }

        //$plugin = new CiviAccountSyncPlugin($plugin_name);
        // if (!$plugin->is_initialized())
        //     continue;


        // Iterate through plugin's capabilities
        foreach ($job_config[$plugin_name] as $capability => $enabled) {
            // ignore any array keys which begin with #, such as #scheduler
            if (substr($capability, 0, 1) == '#')
                continue;

            // if this capability is enabled
            if ($enabled) {
                // if never run or due to run .. or in unscheduled mode
                if ((!isset($last_run_info[$plugin_name][$capability]) or ($last_run_info[$plugin_name][$capability] + ($hours_interval * 60 * 60)) < time()) || !$is_scheduled) {
                    // it might all be lies - check handler really exists
                    if (!function_exists($capability)) {
                      dpm('fn' . $capability . 'duntexit');
                        civiaccountsync_error(t("Capability '@capability' not implemented", array('@capability' => $capability)));
                        continue;
                    }

                    // if so, try to run it
                    try {
                        $success = $capability(isset($last_run_info[$plugin_name][$capability]) ? $last_run_info[$plugin_name][$capability] : 0);
                    } catch (Exception $e) {
                        civiaccountsync_error(t('CiviAccountSync encountered an error while running sync job in @file at @line: @error',
                            array(
                                '@error' => $e->getMessage(),
                                '@file'  => $e->getFile(),
                                '@line'  => $e->getLine()
                            )
                        ));
                        continue;
                    }

                    // if that all went ok, make a note of the time we ran it
                    if ($success)
                        $last_run_info[$plugin_name][$capability] = time();

                }
            }
        }
    }

    // save last run information
    variable_set('civiaccountsync_last_run_info', $last_run_info);

}

/**
 * Utility function to allow plugins to retrieve a list of entities (currently just contributions)
 * which require an update in accounts package
 */
function civiaccountsync_get_pending($entity_type, $action = 'any') {

    $results = array();
    $sql     = "SELECT * FROM {cas_pending} WHERE entity_type = '$entity_type' ORDER BY entity_id";

    if (!is_array($action) and $action != 'any')
        $action = array($action);
    if (is_array($action))
        $sql .= " AND action IN ('" . implode("', '", $action) . "')";

    foreach (db_query($sql) as $pending)
        $results[$pending->entity_id] = $pending->action;

    return $results;

}

/**
 * Utility function to allow plugins to mark an entity as no longer pending, eg: when processed
 */
function civiaccountsync_remove_pending($entity_type, $entity_id, $action = 'all') {

    $query  = "DELETE FROM {cas_pending} WHERE entity_type = :entity_type AND entity_id = :entity_id";
    $params = array(
        ':entity_type' => $entity_type,
        ':entity_id'   => $entity_id
    );

    if ($action != 'all') {
        $query            .= ' AND action = :action';
        $params[':action'] = $action;
    }
    db_query($query, $params);

}

/**
 * Utility function to allow plugins to update the list of pending entities (currently just contributions) after having run a sync job.
 * Accepts a list of updates, with entity_id as the key and updated pending status as the value:
 * 1 = still has pending updates (failure)
 * 0 = no longer has pending updates (success)
 * This function isn't used at the moment, as its calling conventions are a bit complicated. Use civiaccountsync_remove_pending() instead for now.
 */
function civicaccountsync_update_pending($entity_type, $results) {

    // Loop through entries - if pending_status = 0, we can remove the entity from the cas_pending table
    // .. except if there is more than one enabled plugin, but we don't want to worry about that right now.
    $remove_ids = array();
    foreach ($results as $entity_id => $pending_status)
        if (!$pending_status)
            $remove_ids[] = $entity_id;

    db_query("DELETE FROM {cas_pending} WHERE entity_type = :entity_type AND entity_id IN (" . implode(', ', $remove_ids) . ')',
        array(
            ':entity_type' => $entity_type
        )
    );

}

/**
 * Wrapper function for errors
 * Sync errors may occur in scheduled mode (in which case we'd want to post them to the watchdog),
 * or in non-scheduled mode (in which case we probably want to do a drupal_set_message and a watchdog)
 */
function civiaccountsync_error($message) {
    $sync = drupal_static('civiaccountsync');
    if (isset($sync->is_scheduled) and !$sync->is_scheduled)
        drupal_set_message($message, 'error');
    if (isset($sync->is_drush) and $sync->is_drush) {
        drush_log(strip_tags(str_replace('<br />', "\n", $message)), 'error');
        return;
    }
    watchdog('civiaccountsync', $message, array(), WATCHDOG_ERROR);
}

/**
 * As above, but for info messages
 */
function civiaccountsync_message($message) {
    $sync = drupal_static('civiaccountsync');
    if (isset($sync->is_scheduled) and !$sync->is_scheduled)
        drupal_set_message($message);
    if (isset($sync->is_drush) and $sync->is_drush) {
        drush_log(strip_tags(str_replace('<br />', "\n", $message)), 'ok');
        return;
    }
    watchdog('civiaccountsync', $message);
}

/**
 * As above, but for warning messages
 */
function civiaccountsync_warning($message) {
    $sync = drupal_static('civiaccountsync');
    if (isset($sync->is_scheduled) and !$sync->is_scheduled)
        drupal_set_message($message, 'warning');
    if (isset($sync->is_drush) and $sync->is_drush) {
        drush_log(strip_tags(str_replace('<br />', "\n", $message)), 'warning');
        return;
    }
    watchdog('civiaccountsync', $message, array(), WATCHDOG_WARNING);
}

/**
 * Implementation of hook_menu()
 */
function civiaccountsync_menu() {

    $items['admin/cas'] = array(
        'title'            => t('CiviAccountSync'),
        'page callback'    => 'drupal_get_form',
        'page arguments'   => array('civiaccountsync_form_dashboard'),
        'access arguments' => array('administer civiaccountsync'),
        'type'             => MENU_NORMAL_ITEM,
        'file'             => 'civiaccountsync.forms.inc',
        'weight'           => 11,
    );

    $items['admin/cas/dashboard'] = array(
        'title'            => t('Dashboard'),
        'page callback'    => 'drupal_get_form',
        'page arguments'   => array('civiaccountsync_form_dashboard'),
        'access arguments' => array('administer civiaccountsync'),
        'type'             => MENU_NORMAL_ITEM,
        'file'             => 'civiaccountsync.forms.inc',
        'weight'           => 0,
    );

    $items['admin/cas/contact'] = array(
        'title'            => t('Add Contacts to CiviCRM'),
        'page callback'    => 'drupal_get_form',
        'page arguments'   => array('civiaccountsync_form_contact'),
        'access arguments' => array('administer civiaccountsync'),
        'type'             => MENU_NORMAL_ITEM,
        'file'             => 'civiaccountsync.forms.inc',
        'weight'           => 1,
    );

    $items['admin/cas/plugins'] = array(
        'title'            => t('Plugins'),
        'page callback'    => 'drupal_get_form',
        'page arguments'   => array('civiaccountsync_plugins_page'),
        'access arguments' => array('administer civiaccountsync'),
        'type'             => MENU_NORMAL_ITEM,
        'file'             => 'civiaccountsync.forms.inc',
        'weight'           => 2,
    );

    return $items;

}

function civiaccountsync_perm() {
  return array('civiaccountsync_action', 'administer civiaccountsync');
}
/**
 * Implementation of hook_permission
 */
function civiaccountsync_permission() {

    return array(

        'civiaccountsync_action' => array(
            'title'       => t('CiviAccountSync Action'),
            'description' => t('Perform CiviAccountSync actions')
        ),

        'administer civiaccountsync' => array(
            'title'       => t('Administer CiviAccountSync'),
            'description' => t('Perform administration tasks for CiviAccountSync')
        )

    );

}

/**
 * Form callback for plugins overview page
 */
function civiaccountsync_plugins_page() {

    $plugins      = civiaccountsync_get_plugins();
    $config_paths = variable_get('civiaccountsync_plugins_configure_paths', array());
    $rows         = array();

    foreach ($plugins as $module_name => $human_name) {
        $info = system_get_info('module', $module_name);
        // use name from module's .info file if not specified during plugin registration
        if ($module_name == $human_name and isset($info['name']) and !empty($info['name']))
            $human_name = $info['name'];
        $rows[] = array(
            $human_name,
            $info['description'],
            '<center>' . (isset($config_paths[$module_name]) ? l('configure', $config_paths[$module_name]) : '') . '</center>',
        );
    }

    $table = array(
        '#theme'  => 'table',
        '#header' => array(t('Plugin'), t('Description'), ''),
        '#rows'   => $rows
    );

    return $table;

}

/**
 * Function to be called by plugin's hook_enable
 *
 * @param module_name    (String) - the name of the module
 * @param human_name     (String) - optional human-readable plugin name
 * @param configure_path (String) - (Drupal) path to module's configuration page
 * @return void
 */
function civiaccountsync_register_plugin($module_name, $human_name=null, $configure_path=null) {

    $plugins = variable_get('civiaccountsync_plugins', array());
    $plugins[$module_name] = $human_name ? $human_name : $module_name;
    variable_set('civiaccountsync_plugins', $plugins);

    if ($configure_path) {
        $config = variable_get('civiaccountsync_plugins_configure_paths', array());
        $config[$module_name] = $configure_path;
        variable_set('civiaccountsync_plugins_configure_paths', $config);
    }

}

/**
 * Function to be called by plugin's hook_disable
 *
 * @param module_name (String)
 * @return bool indicating success
 */
function civiaccountsync_unregister_plugin($module_name) {

    $plugins = variable_get('civiaccountsync_plugins', array());
    if (!isset($plugins[$module_name]))
        return false;
    unset($plugins[$module_name]);
    variable_set('civiaccountsync_plugins', $plugins);

    // remove config path entry if there is one
    $config = variable_get('civiaccountsync_plugins_configure_paths', array());
    if (isset($config[$module_name]))
        unset($config[$module_name]);
    variable_set('civiaccountsync_plugins_configure_paths', $config);

    return true;

}

/*
 * Function used internally to get a list of available plugins
 * returns an array of module names
 */
function civiaccountsync_get_plugins() {
    return variable_get('civiaccountsync_plugins', array());
}

/*
 * Function to query the capabilities of a plugin.
 * returns an array of <function name> => <human name> key/value pairs
 */
function civiaccountsync_get_plugin_capabilities($module_name) {
    @module_load_include('inc', $module_name, 'civiaccountsync');
    return call_user_func($module_name . '_capabilities');
}
